{"version":3,"sources":["../server/subscriptionHandler.js"],"names":["subscribe","request","updateCallback","console","log","query","variables","schema","context","subscript2RabbitMQ","_subscript2RabbitMQ","result","on","msg","localTodoId","id","updatedPayload"],"mappings":";;;;;;;;;;AAEA;;AACA;;AAGA;;AAEA;;;;;;AAEA;AACA,IAAMA;AAAA,mFAAY,iBAAOC,OAAP,EAAgBC,cAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAChBC,oBAAQC,GAAR,CAAY,oBAAZ;AACOC,iBAFS,GAEWJ,OAFX,CAETI,KAFS,EAEFC,SAFE,GAEWL,OAFX,CAEFK,SAFE;AAAA;AAAA,mBAGK,gDAAiB;AACpCC,oCADoC;AAEpCF,0BAFoC;AAGpCG,uBAAS;AACPC,oCAAoB,8BAAM;AACxBN,0BAAQC,GAAR;AACAM,sCAAoBL,KAApB,EAA2BC,SAA3B,EAAsCJ,cAAtC;AACD;AAJM,eAH2B;AASpCI;AAToC,aAAjB,CAHL;;AAAA;AAGVK,kBAHU;AAAA,6CAcTA,MAdS;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAZ;;AAAA;AAAA;AAAA;AAAA,GAAN;;AAmBA,IAAMD,sBAAsB,SAAtBA,mBAAsB,CAACL,KAAD,EAAQC,SAAR,EAAmBJ,cAAnB,EAAsC;AAChE,mBAAOU,EAAP,CAAU,cAAV;AAAA,sFAA0B,kBAAMC,GAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AACbC,yBADa,GACED,GADF,CACjBE,EADiB;AAAA;AAAA,qBAEK,sCAAgBV,KAAhB,EAAuB,EAACS,wBAAD,EAAvB,EAAsC,IAAtC,EAA4CR,SAA5C,CAFL;;AAAA;AAElBU,4BAFkB;;AAGxBd,6BAAec,cAAf;;AAHwB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAA1B;;AAAA;AAAA;AAAA;AAAA;AAKD,CAND;;kBAQe,EAAChB,oBAAD,E","file":"subscriptionHandler.js","sourcesContent":["// @flow\n\nimport {graphql} from 'graphql';\nimport {\n  graphqlSubscribe,\n} from 'graphql-relay-subscription';\nimport {schema} from './data/schema';\n\nimport events from './events';\n\n//https://github.com/bochen2014/graphql-relay-subscription\nconst subscribe = async (request, updateCallback) => {\n  console.log('subscribe begin...');\n  const {query, variables} = request;\n  const result = await graphqlSubscribe({\n    schema,\n    query,\n    context: {\n      subscript2RabbitMQ: () => {\n        console.log(`pubSub.sub('amqp.changes', msg=>{ .....  })`);\n        _subscript2RabbitMQ(query, variables, updateCallback);\n      },\n    },\n    variables,\n  });\n  return result;\n};\n\n\n\nconst _subscript2RabbitMQ = (query, variables, updateCallback) => {\n  events.on('amqp.changes', async msg => {\n    const {id: localTodoId} = msg;\n    const updatedPayload = await graphql(schema, query, {localTodoId}, null, variables);\n    updateCallback(updatedPayload);\n  });\n}\n\nexport default {subscribe};"]}